"""Added basic data structure

Revision ID: 07256fda7937
Revises: 4cd6a83aa6ad
Create Date: 2024-01-29 17:59:30.997034

"""
from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = '07256fda7937'
down_revision: Union[str, None] = '4cd6a83aa6ad'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'city',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('name_ascii', sa.String(), nullable=False),
        sa.Column(
            'center_location',
            geoalchemy2.types.Geography(
                geometry_type='POINT',
                srid=4326,
                from_text='ST_GeogFromText',
                name='geography',
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column('country_name', sa.String(), nullable=False),
        sa.Column('iso_code_two', sa.String(), nullable=False),
        sa.Column('iso_code_three', sa.String(), nullable=False),
        sa.Column('population', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_index(
        'idx_city_center_location',
        'city',
        ['center_location'],
        unique=False,
        postgresql_using='gist',
    )
    op.create_table(
        'location',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'point',
            geoalchemy2.types.Geography(
                geometry_type='POINT',
                srid=4326,
                from_text='ST_GeogFromText',
                name='geography',
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column('city_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ['city_id'],
            ['city.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_index(
        'idx_location_point',
        'location',
        ['point'],
        unique=False,
        postgresql_using='gist',
    )
    op.create_table(
        'hitstorical_hourly_weather',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('date', sa.DateTime(), nullable=False),
        sa.Column('pressure', sa.Float(), nullable=False),
        sa.Column('wind_speed', sa.Float(), nullable=False),
        sa.Column('wind_gust_speed', sa.Float(), nullable=False),
        sa.Column('wind_dir', sa.Float(), nullable=False),
        sa.Column('temperature', sa.Float(), nullable=False),
        sa.Column('feelslike_temp', sa.Float(), nullable=False),
        sa.Column('humidity', sa.Float(), nullable=False),
        sa.Column('clouds', sa.Float(), nullable=False),
        sa.Column('visibility', sa.Float(), nullable=False),
        sa.Column('precipitation', sa.Float(), nullable=False),
        sa.Column('snow', sa.Float(), nullable=False),
        sa.Column('location_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ['location_id'],
            ['location.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
    )
    op.drop_table('hourly_weather')
    op.drop_table('layer')
    op.drop_table('topology')
    op.drop_table('spatial_ref_sys')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'spatial_ref_sys',
        sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            'auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True
        ),
        sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            'srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True
        ),
        sa.Column(
            'proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True
        ),
        sa.CheckConstraint(
            'srid > 0 AND srid <= 998999', name='spatial_ref_sys_srid_check'
        ),
        sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey'),
    )
    op.create_table(
        'topology',
        sa.Column(
            'id',
            sa.INTEGER(),
            server_default=sa.text("nextval('topology_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            'precision',
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'hasz',
            sa.BOOLEAN(),
            server_default=sa.text('false'),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint('id', name='topology_pkey'),
        sa.UniqueConstraint('name', name='topology_name_key'),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        'layer',
        sa.Column('topology_id', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column('layer_id', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column('schema_name', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('table_name', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('feature_column', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('feature_type', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            'level',
            sa.INTEGER(),
            server_default=sa.text('0'),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column('child_id', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ['topology_id'], ['topology.id'], name='layer_topology_id_fkey'
        ),
        sa.PrimaryKeyConstraint('topology_id', 'layer_id', name='layer_pkey'),
        sa.UniqueConstraint(
            'schema_name',
            'table_name',
            'feature_column',
            name='layer_schema_name_table_name_feature_column_key',
        ),
    )
    op.create_table(
        'hourly_weather',
        sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            'timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            'pressure',
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'wind_speed',
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'wind_gust_speed',
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'wind_dir',
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'temperature',
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'feelslike_temp',
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'humidity',
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'clouds',
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'visibility',
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'precipitation',
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'snow',
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint('id', name='hourly_weather_pkey'),
    )
    op.drop_table('hitstorical_hourly_weather')
    op.drop_index('idx_location_point', table_name='location', postgresql_using='gist')
    op.drop_table('location')
    op.drop_index(
        'idx_city_center_location', table_name='city', postgresql_using='gist'
    )
    op.drop_table('city')
    # ### end Alembic commands ###
